//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace TMSite.Models
{
    using System;
    using System.Collections.Generic;
    using System.ComponentModel.DataAnnotations;
    using System.Linq;
    using System.Web;
    
    public partial class Vehicle : IValidatableObject
    {
        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2214:DoNotCallOverridableMethodsInConstructors")]
        public Vehicle()
        {
            this.Routes = new HashSet<Route>();
        }
    
        public int VehicleID { get; set; }
        [Display(Name ="Reg Number")]
        [Required(ErrorMessage ="Vehicle Registration Number is Required")]
        public string RegNumber { get; set; }
        [Display(Name ="Reg Date")]
        [Required(ErrorMessage =" Vehicle Registration Date is Required")]
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public Nullable<System.DateTime> RegDate { get; set; }
        [Required(ErrorMessage =" Make of Vehicle is Required")]
        public string Make { get; set; }
        public string Model { get; set; }
        [Display(Name ="Fuel Type")]
        [Required(ErrorMessage ="Vehicle Fule Type is Required")]
        public string FuelType { get; set; }
        [Required(ErrorMessage ="MOT Date is Required")]
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public Nullable<System.DateTime> MOTExpiryDate { get; set; }
        [Required(ErrorMessage ="Insurance Expiry Date is Required")]
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public Nullable<System.DateTime> InsuranceExpiryDate { get; set; }
        [Required(ErrorMessage ="Vehicle's Last Service Date is Required")]
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public Nullable<System.DateTime> LastServicedDate { get; set; }
        [DataType(DataType.Date)]
        [DisplayFormat(DataFormatString = "{0:dd/MM/yyyy}", ApplyFormatInEditMode = true)]
        public Nullable<System.DateTime> ServiceDueDate { get; set; }
        public string CurrentMileage { get; set; }
        public string FuelCardNumber { get; set; }


        // Custom Validation with IValidatableObject interface
        IEnumerable<ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            List<ValidationResult> res = new List<ValidationResult>();
            if (RegDate > DateTime.Today)
            {
                ValidationResult mss = new ValidationResult("Registration-Date must be Earlier than or equal to Current Date.");
                res.Add(mss);

            }

            if (MOTExpiryDate < DateTime.Today)
            {
                ValidationResult mss = new ValidationResult("MOT-Expiry-Date must be greater than or equal to Current Date.");
                res.Add(mss);
            }

            if (InsuranceExpiryDate < DateTime.Today)
            {
                ValidationResult mss = new ValidationResult("Insurance-Expiry-Date must be greater than or equal to Current Date.");
                res.Add(mss);
            }

            if (LastServicedDate > DateTime.Today)
            {
                ValidationResult mss = new ValidationResult("Last-Serviced-Date must be Earlier than or equal to Current Date.");
                res.Add(mss);
            }

            if (ServiceDueDate < LastServicedDate)
            {
                ValidationResult mss = new ValidationResult("Service-Due-Date must be greater than or equal to Last-Serviced-Date.");
                res.Add(mss);
            }

            return res;


        }

        [System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Usage", "CA2227:CollectionPropertiesShouldBeReadOnly")]
        public virtual ICollection<Route> Routes { get; set; }
    }
}
